{"ts":1358419522453,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*! Copyright (c) 2010 Brandon Aaron (http://brandonaaron.net)\n * Licensed under the MIT License (LICENSE.txt).\n *\n * Version 1.1\n */\n\n(function($) {\n\n$.fn.overlaps = function(selector) {\n    // if nothing is passed, act as a filter\n    if (arguments.length === 0) {\n        return this.pushStack(filterOverlaps(this));\n    }\n    // otherwise compare selected elements against passed eleemnts\n    else {\n        return isOverlapping(this, $(selector));\n    }\n};\n\n$.expr[':'].overlaps = function(elem, i, m, array) {\n    return isOverlapping([elem], array);\n};\n$.expr[':'].overlapping = $.expr[':'].overlaps;\n\nfunction filterOverlaps(collection) {\n    var dims   = getDims(collection),\n        stack  = [],\n        index1 = 0,\n        index2 = 0,\n        length = dims.length;\n    \n    for (; index1 < length; index1++) {\n        for (index2 = 0; index2 < length; index2++) {\n            if (index1 === index2) { \n                continue;\n            }\n            if (checkOverlap(dims[index1], dims[index2])) {\n                stack.push(collection[index2]);\n            }\n        }\n    }\n    \n    return $.unique(stack);\n}\n\nfunction isOverlapping(collection1, collection2) {\n    var dims1   = getDims(collection1),\n        dims2   = getDims(collection2),\n        index1  = 0,\n        index2  = 0,\n        length1 = dims1.length,\n        length2 = dims2.length;\n\n    for (; index1 < length1; index1++) {\n        for (index2 = 0; index2 < length2; index2++) {\n            if (collection1[index1] === collection2[index2]) {\n                continue;\n            }\n            if (checkOverlap(dims1[index1], dims2[index2])) {\n                return true;\n            }\n        }\n    }\n    \n    return false;\n}\n\nfunction getDims(elems) {\n    var dims = [], i = 0, offset, elem;\n    \n    while ((elem = elems[i++])) {\n        //offset = $(elem).offset();\n        offset = $(elem);\n        dims.push([\n            offset.data('top'),\n            offset.data('left'),\n            //offset.top,\n            //offset.left,\n            elem.offsetWidth,\n            elem.offsetHeight\n        ]);\n    }\n    \n    return dims;\n}\n\nfunction checkOverlap(dims1, dims2) {\n    var x1 = dims1[1], y1 = dims1[0],\n        w1 = dims1[2], h1 = dims1[3],\n        x2 = dims2[1], y2 = dims2[0],\n        w2 = dims2[2], h2 = dims2[3];\n    return !(y2 + h2 < y1 || y1 + h1 < y2 || x2 + w2 < x1 || x1 + w1 < x2);\n}\n\n})(jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":2400}]],"length":2400}
{"contributors":[],"silentsave":false,"ts":1358419537707,"patch":[[{"diffs":[[0,".push([\n"],[1,"//"],[0,"        "]],"start1":1891,"start2":1891,"length1":16,"length2":18},{"diffs":[[0,"ata('top'),\n"],[1,"//"],[0,"            "]],"start1":1921,"start2":1921,"length1":24,"length2":26},{"diffs":[[0,"            "],[-1,"//"],[0,"offset.top,\n"]],"start1":1968,"start2":1968,"length1":26,"length2":24},{"diffs":[[0,"            "],[-1,"//"],[0,"offset.left,"]],"start1":1992,"start2":1992,"length1":26,"length2":24}]],"length":2400,"saved":false}
{"ts":1358419599674,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"offset ="]],"start1":1816,"start2":1816,"length1":18,"length2":16},{"diffs":[[0,"fset();\n        "],[1,"//"],[0,"offset = $(elem)"]],"start1":1843,"start2":1843,"length1":32,"length2":34}]],"length":2400,"saved":false}
